// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: reddit_service.proto

package reddit_implementation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RedditService_GetPostComments_FullMethodName = "/reddit_implementation.RedditService/GetPostComments"
)

// RedditServiceClient is the client API for RedditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedditServiceClient interface {
	GetPostComments(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*CommentsResponse, error)
}

type redditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedditServiceClient(cc grpc.ClientConnInterface) RedditServiceClient {
	return &redditServiceClient{cc}
}

func (c *redditServiceClient) GetPostComments(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*CommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentsResponse)
	err := c.cc.Invoke(ctx, RedditService_GetPostComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedditServiceServer is the server API for RedditService service.
// All implementations must embed UnimplementedRedditServiceServer
// for forward compatibility
type RedditServiceServer interface {
	GetPostComments(context.Context, *PostRequest) (*CommentsResponse, error)
	mustEmbedUnimplementedRedditServiceServer()
}

// UnimplementedRedditServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRedditServiceServer struct {
}

func (UnimplementedRedditServiceServer) GetPostComments(context.Context, *PostRequest) (*CommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostComments not implemented")
}
func (UnimplementedRedditServiceServer) mustEmbedUnimplementedRedditServiceServer() {}

// UnsafeRedditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedditServiceServer will
// result in compilation errors.
type UnsafeRedditServiceServer interface {
	mustEmbedUnimplementedRedditServiceServer()
}

func RegisterRedditServiceServer(s grpc.ServiceRegistrar, srv RedditServiceServer) {
	s.RegisterService(&RedditService_ServiceDesc, srv)
}

func _RedditService_GetPostComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).GetPostComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_GetPostComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).GetPostComments(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedditService_ServiceDesc is the grpc.ServiceDesc for RedditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reddit_implementation.RedditService",
	HandlerType: (*RedditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostComments",
			Handler:    _RedditService_GetPostComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reddit_service.proto",
}
