// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.1
// source: reddit_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "reddit_implementation";

export interface PostRequest {
  subreddit: string;
  searchQuery: string;
  limit: number;
}

export interface CommentsResponse {
  postTitle: string;
  comments: Comment[];
}

export interface Comment {
  body: string;
}

function createBasePostRequest(): PostRequest {
  return { subreddit: "", searchQuery: "", limit: 0 };
}

export const PostRequest: MessageFns<PostRequest> = {
  encode(message: PostRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subreddit !== "") {
      writer.uint32(10).string(message.subreddit);
    }
    if (message.searchQuery !== "") {
      writer.uint32(18).string(message.searchQuery);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subreddit = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.searchQuery = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostRequest {
    return {
      subreddit: isSet(object.subreddit) ? globalThis.String(object.subreddit) : "",
      searchQuery: isSet(object.searchQuery) ? globalThis.String(object.searchQuery) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: PostRequest): unknown {
    const obj: any = {};
    if (message.subreddit !== "") {
      obj.subreddit = message.subreddit;
    }
    if (message.searchQuery !== "") {
      obj.searchQuery = message.searchQuery;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostRequest>, I>>(base?: I): PostRequest {
    return PostRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostRequest>, I>>(object: I): PostRequest {
    const message = createBasePostRequest();
    message.subreddit = object.subreddit ?? "";
    message.searchQuery = object.searchQuery ?? "";
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseCommentsResponse(): CommentsResponse {
  return { postTitle: "", comments: [] };
}

export const CommentsResponse: MessageFns<CommentsResponse> = {
  encode(message: CommentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.postTitle !== "") {
      writer.uint32(10).string(message.postTitle);
    }
    for (const v of message.comments) {
      Comment.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.postTitle = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comments.push(Comment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommentsResponse {
    return {
      postTitle: isSet(object.postTitle) ? globalThis.String(object.postTitle) : "",
      comments: globalThis.Array.isArray(object?.comments) ? object.comments.map((e: any) => Comment.fromJSON(e)) : [],
    };
  },

  toJSON(message: CommentsResponse): unknown {
    const obj: any = {};
    if (message.postTitle !== "") {
      obj.postTitle = message.postTitle;
    }
    if (message.comments?.length) {
      obj.comments = message.comments.map((e) => Comment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommentsResponse>, I>>(base?: I): CommentsResponse {
    return CommentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommentsResponse>, I>>(object: I): CommentsResponse {
    const message = createBaseCommentsResponse();
    message.postTitle = object.postTitle ?? "";
    message.comments = object.comments?.map((e) => Comment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseComment(): Comment {
  return { body: "" };
}

export const Comment: MessageFns<Comment> = {
  encode(message: Comment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== "") {
      writer.uint32(10).string(message.body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.body = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment {
    return { body: isSet(object.body) ? globalThis.String(object.body) : "" };
  },

  toJSON(message: Comment): unknown {
    const obj: any = {};
    if (message.body !== "") {
      obj.body = message.body;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Comment>, I>>(base?: I): Comment {
    return Comment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Comment>, I>>(object: I): Comment {
    const message = createBaseComment();
    message.body = object.body ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
