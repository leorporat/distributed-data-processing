/**
 * Reddit Service Implementation
 * 
 * This file provides a service layer for interacting with the Reddit API
 * via our backend. It handles the communication between the frontend
 * and the backend, and provides a clean interface for React components.
 */

/**
 * Interface for Reddit API request
 */
export interface RedditRequest {
  subreddit: string;
  searchQuery: string;
  limit: number;
}

/**
 * Interface for Reddit comments 
 */
export interface RedditComment {
  body: string;
}

/**
 * Interface for Reddit API response
 */
export interface RedditResponse {
  postTitle: string;
  comments: RedditComment[];
}

/**
 * Interface for summarized Reddit content
 */
export interface SummaryResult {
  originalQuery: string;
  subreddit: string;
  postTitle: string;
  summary: string;
  sentimentScore?: number;
  topComments?: RedditComment[];
}

// Configuration for the API endpoint
const API_URL = process.env.NEXT_PUBLIC_GRPC_HOST || 'http://localhost:8080';
const ENDPOINT = `${API_URL}/reddit_implementation.RedditService/GetPostComments`;

/**
 * Service layer for Reddit API
 */
export class RedditService {
  /**
   * Search Reddit posts and get comments based on query
   * 
   * @param subreddit The subreddit to search in
   * @param searchQuery The search query
   * @param limit Maximum number of results to return
   * @returns A Promise that resolves to a SummaryResult
   */
  static async searchReddit(
    subreddit: string,
    searchQuery: string,
    limit: number
  ): Promise<SummaryResult> {
    try {
      console.log('Sending request to:', ENDPOINT);
      
      // Create the request payload
      const requestPayload: RedditRequest = {
        subreddit,
        searchQuery,
        limit
      };
      
      console.log('Request payload:', requestPayload);
      
      // Make the HTTP request
      const response = await fetch(ENDPOINT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(requestPayload)
      });
      
      // Check if the request was successful
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error ${response.status}: ${errorText}`);
      }
      
      // Parse the JSON response
      const data: RedditResponse = await response.json();
      console.log('Response data:', data);
      
      // Process and transform the response
      const comments = data.comments.map(comment => ({ 
        body: comment.body 
      }));
      
      // For now, we'll use a simple local summary generation
      // In a production environment, this would come from a backend processing service
      // that does proper NLP summarization
      const summary = this.generateTemporarySummary(searchQuery, subreddit, comments);
      
      // Create a SummaryResult from the response
      const result: SummaryResult = {
        originalQuery: searchQuery,
        subreddit,
        postTitle: data.postTitle,
        summary,
        topComments: comments.slice(0, Math.min(3, comments.length)), // Take up to 3 comments
        // This would come from backend sentiment analysis in a real implementation
        sentimentScore: 0.65
      };
      
      return result;
    } catch (error) {
      console.error('Error in searchReddit:', error);
      
      // Generic error handling
      throw new Error(`Failed to fetch Reddit data: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * TEMPORARY: Generate a basic summary from comments
   * In a production app, this would be done by the backend using proper NLP
   * 
   * @param query The search query
   * @param subreddit The subreddit
   * @param comments The comments to summarize
   * @returns A basic summary
   */
  private static generateTemporarySummary(
    query: string, 
    subreddit: string, 
    comments: RedditComment[]
  ): string {
    // Count the number of comments
    const commentCount = comments.length;
    
    if (commentCount === 0) {
      return `No comments found for "${query}" in r/${subreddit}. Try refining your search or selecting a different subreddit.`;
    }
    
    // Simple word count for all comments
    const totalWords = comments.reduce((count, comment) => {
      return count + (comment.body.split(/\s+/).length);
    }, 0);
    
    // Temporary summary until backend provides proper summarization
    return `Based on ${commentCount} comments with ${totalWords} total words about "${query}" in r/${subreddit}:\n\n` +
      "• This is a temporary client-side summary\n" +
      "• In the full implementation, the summary would be generated by the backend\n" +
      "• The backend would use proper NLP techniques to create a meaningful summary\n" +
      "• For now, you can read the comments below to get the main points from the discussion";
  }
}

// Export a convenient method for making the API call
export const searchReddit = RedditService.searchReddit.bind(RedditService);

